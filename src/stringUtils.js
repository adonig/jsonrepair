"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.endsWithCommaOrNewline = exports.removeAtIndex = exports.insertBeforeLastWhitespace = exports.stripLastOccurrence = exports.isSingleQuote = exports.isDoubleQuote = exports.isQuote = exports.isSpecialWhitespace = exports.isWhitespace = exports.isControlCharacter = exports.isStartOfValue = exports.isDelimiter = exports.isValidStringCharacter = exports.isNonZeroDigit = exports.isDigit = exports.isHex = exports.codeLowercaseF = exports.codeUppercaseF = exports.codeLowercaseE = exports.codeUppercaseE = exports.codeLowercaseA = exports.codeUppercaseA = exports.codeSemicolon = exports.codeColon = exports.codeDot = exports.codeComma = exports.codeNine = exports.codeOne = exports.codeZero = exports.codeQuote = exports.codeMinus = exports.codePlus = exports.codeDoubleQuote = exports.codeFormFeed = exports.codeBackspace = exports.codeReturn = exports.codeTab = exports.codeNewline = exports.codeSpace = exports.codeCloseParenthesis = exports.codeOpenParenthesis = exports.codeClosingBracket = exports.codeOpeningBracket = exports.codeClosingBrace = exports.codeOpeningBrace = exports.codeAsterisk = exports.codeSlash = exports.codeBackslash = void 0;
// TODO: sort the codes
exports.codeBackslash = 0x5c; // "\"
exports.codeSlash = 0x2f; // "/"
exports.codeAsterisk = 0x2a; // "*"
exports.codeOpeningBrace = 0x7b; // "{"
exports.codeClosingBrace = 0x7d; // "}"
exports.codeOpeningBracket = 0x5b; // "["
exports.codeClosingBracket = 0x5d; // "]"
exports.codeOpenParenthesis = 0x28; // "("
exports.codeCloseParenthesis = 0x29; // ")"
exports.codeSpace = 0x20; // " "
exports.codeNewline = 0xa; // "\n"
exports.codeTab = 0x9; // "\t"
exports.codeReturn = 0xd; // "\r"
exports.codeBackspace = 0x08; // "\b"
exports.codeFormFeed = 0x0c; // "\f"
exports.codeDoubleQuote = 0x0022; // "
exports.codePlus = 0x2b; // "+"
exports.codeMinus = 0x2d; // "-"
exports.codeQuote = 0x27; // "'"
exports.codeZero = 0x30;
exports.codeOne = 0x31;
exports.codeNine = 0x39;
exports.codeComma = 0x2c; // ","
exports.codeDot = 0x2e; // "." (dot, period)
exports.codeColon = 0x3a; // ":"
exports.codeSemicolon = 0x3b; // ";"
exports.codeUppercaseA = 0x41; // "A"
exports.codeLowercaseA = 0x61; // "a"
exports.codeUppercaseE = 0x45; // "E"
exports.codeLowercaseE = 0x65; // "e"
exports.codeUppercaseF = 0x46; // "F"
exports.codeLowercaseF = 0x66; // "f"
const codeNonBreakingSpace = 0xa0;
const codeEnQuad = 0x2000;
const codeHairSpace = 0x200a;
const codeNarrowNoBreakSpace = 0x202f;
const codeMediumMathematicalSpace = 0x205f;
const codeIdeographicSpace = 0x3000;
const codeDoubleQuoteLeft = 0x201c; // “
const codeDoubleQuoteRight = 0x201d; // ”
const codeQuoteLeft = 0x2018; // ‘
const codeQuoteRight = 0x2019; // ’
const codeGraveAccent = 0x0060; // `
const codeAcuteAccent = 0x00b4; // ´
function isHex(code) {
    return ((code >= exports.codeZero && code < exports.codeNine) ||
        (code >= exports.codeUppercaseA && code <= exports.codeUppercaseF) ||
        (code >= exports.codeLowercaseA && code <= exports.codeLowercaseF));
}
exports.isHex = isHex;
function isDigit(code) {
    return code >= exports.codeZero && code <= exports.codeNine;
}
exports.isDigit = isDigit;
function isNonZeroDigit(code) {
    return code >= exports.codeOne && code <= exports.codeNine;
}
exports.isNonZeroDigit = isNonZeroDigit;
function isValidStringCharacter(code) {
    return code >= 0x20 && code <= 0x10ffff;
}
exports.isValidStringCharacter = isValidStringCharacter;
function isDelimiter(char) {
    return Boolean(regexDelimiter.test(char) || (char && isQuote(char.charCodeAt(0)))).valueOf();
}
exports.isDelimiter = isDelimiter;
const regexDelimiter = /^[,:[\]{}()\n]$/;
function isStartOfValue(char) {
    return Boolean(regexStartOfValue.test(char) || (char && isQuote(char.charCodeAt(0)))).valueOf();
}
exports.isStartOfValue = isStartOfValue;
// alpha, number, minus, or opening bracket or brace
const regexStartOfValue = /^[[{\w-]$/;
function isControlCharacter(code) {
    return (code === exports.codeNewline ||
        code === exports.codeReturn ||
        code === exports.codeTab ||
        code === exports.codeBackspace ||
        code === exports.codeFormFeed);
}
exports.isControlCharacter = isControlCharacter;
/**
 * Check if the given character is a whitespace character like space, tab, or
 * newline
 */
function isWhitespace(code) {
    return code === exports.codeSpace || code === exports.codeNewline || code === exports.codeTab || code === exports.codeReturn;
}
exports.isWhitespace = isWhitespace;
/**
 * Check if the given character is a special whitespace character, some
 * unicode variant
 */
function isSpecialWhitespace(code) {
    return (code === codeNonBreakingSpace ||
        (code >= codeEnQuad && code <= codeHairSpace) ||
        code === codeNarrowNoBreakSpace ||
        code === codeMediumMathematicalSpace ||
        code === codeIdeographicSpace);
}
exports.isSpecialWhitespace = isSpecialWhitespace;
/**
 * Test whether the given character is a quote or double quote character.
 * Also tests for special variants of quotes.
 */
function isQuote(code) {
    // the first check double quotes, since that occurs most often
    return isDoubleQuote(code) || isSingleQuote(code);
}
exports.isQuote = isQuote;
/**
 * Test whether the given character is a double quote character.
 * Also tests for special variants of double quotes.
 */
function isDoubleQuote(code) {
    // the first check double quotes, since that occurs most often
    return code === exports.codeDoubleQuote || code === codeDoubleQuoteLeft || code === codeDoubleQuoteRight;
}
exports.isDoubleQuote = isDoubleQuote;
/**
 * Test whether the given character is a single quote character.
 * Also tests for special variants of single quotes.
 */
function isSingleQuote(code) {
    return (code === exports.codeQuote ||
        code === codeQuoteLeft ||
        code === codeQuoteRight ||
        code === codeGraveAccent ||
        code === codeAcuteAccent);
}
exports.isSingleQuote = isSingleQuote;
/**
 * Strip last occurrence of textToStrip from text
 */
function stripLastOccurrence(text, textToStrip, stripRemainingText = false) {
    const index = text.lastIndexOf(textToStrip);
    return index !== -1
        ? text.substring(0, index) + (stripRemainingText ? '' : text.substring(index + 1))
        : text;
}
exports.stripLastOccurrence = stripLastOccurrence;
function insertBeforeLastWhitespace(text, textToInsert) {
    let index = text.length;
    if (!isWhitespace(text.charCodeAt(index - 1))) {
        // no trailing whitespaces
        return text + textToInsert;
    }
    while (isWhitespace(text.charCodeAt(index - 1))) {
        index--;
    }
    return text.substring(0, index) + textToInsert + text.substring(index);
}
exports.insertBeforeLastWhitespace = insertBeforeLastWhitespace;
function removeAtIndex(text, start, count) {
    return text.substring(0, start) + text.substring(start + count);
}
exports.removeAtIndex = removeAtIndex;
/**
 * Test whether a string ends with a newline or comma character and optional whitespace
 */
function endsWithCommaOrNewline(text) {
    return /[,\n][ \t\r]*$/.test(text);
}
exports.endsWithCommaOrNewline = endsWithCommaOrNewline;
//# sourceMappingURL=data:application/json;base64,